<%
begin
    errs = []
    # load the login object
    l = BlackStack::MySaaS::Login.where(:id=>params[:lid]).first
    login_seconds_ago = l ? ((now - l.create_time.to_s) * 24 * 60 * 60).to_i : 0
    # load the user object
    u = BlackStack::MySaaS::User.where(:id=>params[:uid]).first
    # validate: login exists
    errs << "Login not found." if l.nil?
    # validate: user exists
    errs << "User not found." if u.nil?
    # validate: l.create_time is not aged than 1 day
    errs << "Login expired. Access again to your #{APP_NAME} to allow access to other users' accounts." if l && login_seconds_ago > 24*60*60
    #DB["SELECT NOW() - INTERVAL '1 day' > l.create_time AS expired FROM \"login\" l WHERE id='#{l.id.to_guid}'"].first[:expired]
    # validate the logged-in account must be sysowner
    errs << "You must be a sysowner to access this page." if !l.user.account.sysowner?
    # raise exception if any error
    raise errs.join("<br/>") unless errs.empty? 
    # create the login instance
    @login = BlackStack::MySaaS::Login.new
    @login.id = guid
    @login.id_user = u.id
    @login.create_time = now
    @login.id_real_user = l.id_user
    @login.save
    # save login id in session
    session['login.id'] = @login.id
    # redirect to dashboard
    redirect "/dashboard"
rescue => e
    %>
    <p style='color:red;'>Error: <%=e.message.encode_html%></p>
    <%
end
%>