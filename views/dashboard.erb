<%
# TODO: Move this to config.rb when I can deploy with '"'
# Defining monitors
BlackStack::Monitoring.remove_all
BlackStack::Monitoring.set([{
# Total Resources
# - scrapers online - total
# - addresses shared - total
# Capacity
# - daily pages upload capacity (achieved / needed)
# - daily email deliveries capacity (achieved / needed)
# Performance
# - average scrapers performance (uploaded pages / daily quota)
# - pages upload / hr. (achieved / needed)
# - pages earning / hr. (achieved / needed)
# - pages parsing / hr. (achieved / needed)
# - average emails appened / page (achieved / needed)
# - emails delivery / hr. (achieved / needed)
# Errors
# - page.upload error rate
# - page.earning error rate
# - page.parsing error rate
# - email.delivery error rate

# Total Resources
  :section_name => '1. Total Resources',
  :name => 'Scrapers',
  :description => 'Number of Scrpers Sharing their Extensions, Active the Last Hour',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = '
      select count(*) as n
      from '+34.chr+'user'+34.chr+' u
      where coalesce(u.scraper_share, false) = true
      and u.scraper_last_ping_time > cast(\''+now.to_s+'\' as timestamp) - interval \'1 hours\'
    '
    DB[q].first[:n].to_i
  end,
  :threshold => nil, # there is no threshold to comparate
  :comparsion => BlackStack::Monitoring::COMPARSION_GREATER,
  :unit_name => 'scrapers',
}, {
  :section_name => '1. Total Resources',
  :name => 'Addresses',
  :description => 'Number of Addresses, Shared and Enabled, that Passed the Last Check',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = '
    select count(a.*) as n
    from eml_address a
    where coalesce(a.shared, false) = true
    and coalesce(a.enabled, false) = true
    and coalesce(a.check_success, false) = true
    '
    DB[q].first[:n].to_i
  end,
  :threshold => nil, # there is no threshold to comparate
  :comparsion => BlackStack::Monitoring::COMPARSION_GREATER,
  :unit_name => 'scrapers',

# Capacity
}, {
  :section_name => '2. Capacity',
  :name => 'Daily Pages',
  :description => 'Daily pages upload capacity (achieved / needed)<br/><a target="_window" href="https://github.com/leandrosardi/cs/issues/22">Problem Resolution Procedure</a>.',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = "
    select count(*) as n
    from scr_page p
    where p.upload_end_time > current_timestamp - interval '1 day'"
    DB[q].first[:n].to_i
  end,
  :threshold_function => Proc.new do |*args|
    q = 'select sum(v.pages_per_day) as n from v_dfyl_capacity_needed v where v.pages_per_day > 0'
    DB[q].first[:n].to_i
  end,
  :comparsion => BlackStack::Monitoring::COMPARSION_GREATER,
  :unit_name => 'pages uploaded',
}, {
  :section_name => '2. Capacity',
  :name => 'Daily Emails',
  :description => 'daily email deliveries capacity (achieved / needed)<br/><a target="_window" href="https://github.com/leandrosardi/cs/issues/22">Problem Resolution Procedure</a>.',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = "
    select sum(a.max_deliveries_per_day) as n
    from eml_address a
    where coalesce(a.enabled, false) = true
    and coalesce(a.shared, false) = true
    and coalesce(a.check_success, false) = true
    "
    DB[q].first[:n].to_i
  end,
  :threshold_function => Proc.new do |*args|
    q = 'select cast(sum(v.email_credits) as float)/28 as n from v_eml_deadlines v where v.email_credits > 0'
    DB[q].first[:n].to_i
  end,
  :comparsion => BlackStack::Monitoring::COMPARSION_GREATER,
  :unit_name => 'emails deliveried',
}, {
  :section_name => '3. Performance',
  :name => 'Pages Upload / Hr.',
  :description => 'Number of Pages Uploaded the Last Hour',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = '
      --
      -- pages scraped in last hour - total
      select count(distinct p.id) as n
      from scr_page p
      where p.upload_end_time > cast(\''+now.to_s+'\' as timestamp) - interval \'1 hour\'
      and p.upload_success = true
    '
    DB[q].first[:n].to_i
  end,
  :threshold_function => Proc.new do |*args|
    q = '
      -- pages upload needed per hour
      select -(coalesce(sum(b.credits),0) / (21*24)) / 10 as n
      from account a
      join balance b on (a.id=b.id_account and b.service_code=\'leads\')
    '
    DB[q].first[:n].to_i
  end,
  :comparsion => BlackStack::Monitoring::COMPARSION_GREATER,
  :unit_name => 'pages',
}, {
  :section_name => '3. Performance',
  :name => 'Pages Parsing / Hr.',
  :description => 'Number of Pages Parsed the Last Hour',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = '
      --
      -- pages scraped in last hour - total
      select count(distinct p.id) as n
      from scr_page p
      where p.parse_end_time > cast(\''+now.to_s+'\' as timestamp) - interval \'1 hour\'
      and p.parse_success = true
    '
    DB[q].first[:n].to_i
  end,
  :threshold_function => Proc.new do |*args|
    q = '
      -- pages upload needed per hour
      select -(coalesce(sum(b.credits),0) / (21*24)) / 10 as n
      from account a
      join balance b on (a.id=b.id_account and b.service_code=\'leads\')
    '
    DB[q].first[:n].to_i
  end,
  :comparsion => BlackStack::Monitoring::COMPARSION_GREATER,
  :unit_name => 'pages',
}, {
  :section_name => '3. Performance',
  :name => 'Pages in Queue',
  :description => 'Number of Pages Pending to Be Parsed.\nKeep this number as low as possible, in order to pay additional for scraping services.',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = '
      select count(distinct p.id) as n
      from scr_page p
      join scr_order o on (o.id=p.id_order and o.status=true)
      join '+34.chr+'user'+34.chr+' u on u.id=o.id_user
      join account a on a.id=u.id_account
      join balance b on (a.id=b.id_account and b.service_code=\'leads\' and b.amount>0)
      where p.parse_success is null
    '
    DB[q].first[:n].to_i
  end,
  :threshold => 0,
  :comparsion => BlackStack::Monitoring::COMPARSION_LESS_EQUAL,
  :unit_name => 'pages',
}, {
  :section_name => '3. Performance',
  :name => 'Email Delivery Capacity',
  :description => 'Number of Daily Emails that can be sent, over the number of daily emails I need to send.',
  :type => BlackStack::Monitoring::TYPE_INT,
  :value_function => Proc.new do |*args|
    q = '
      select sum(a.max_deliveries_per_day) as n
      from eml_address a
      where a.delete_time is null
      and a.shared = true
      and a.enabled = true
    '
    DB[q].first[:n].to_i
  end,
  :threshold_function => Proc.new do |*args|
    q = '
      select -(coalesce(sum(b.credits),0) / 21) as n
      from account a
      join balance b on (a.id=b.id_account and b.service_code=\'deliveries\')
    '
    DB[q].first[:n].to_i
  end,
  :comparsion => BlackStack::Monitoring::COMPARSION_GREATER,
  :unit_name => 'emails',
}])
%>

<style>
    .legendLabel {
        color:White;
    }

	table.qabot {
		width:100%;
		margin-top:15px;
		padding-top:15px;
	}

	table.qabot tr.qarow {
		width:100%;
	}

	table.qabot tr.qarow td.qaname {
		width: 350px;
		font-size: 14px;
		border-bottom: 0px;
        color: gray;
	}

	table.qabot tr.qarow td.qaname span.qatitle {
		width: 350px;
		font-size: 14px;
		font-weight: bold;
		border-bottom: 0px;
        color: black;
	}

	table.qabot tr.qarow td.qadesc {
		width: auto;
		font-size: 10px;
		border-bottom: 2px solid #ccc;
	}

	table.qabot tr.qarow td.qaflag {
		width: 125px;
		height: 50px;
		text-align: center;
		vertical-align: middle;
		border-bottom: 2px solid #ccc;
	}

	table.qabot tr.qarow td.qaflag span.qavalue {
		height: 35px;
		font-size: 20px;
		font-weight: bold;
	}

	table.qabot tr.qarow td.qaflag span.qacomment {
		height: 15px;
		font-size: 14px;
		font-weight: bold;
	}

	table.qabot tr.qarow td.qared {
		color: white;
		background-color: rgb(136, 0, 21);
	}

	table.qabot tr.qarow td.qagreen {
		color: white;
		background-color: rgb(0, 128, 64);
	}

	table.qabot tr.qarow td.qagray {
		color: black;
		background-color: rgb(128, 128, 128);
	}

	table.qabot tr.qarow td.qachart {
		width: 50%;
		text-align: left;
		vertical-align: top;
		border-bottom: 2px solid #ccc;
	}

	table.qabot tr.qarow td.qabuttons {
		height: 25px;
		margin-left: 5px;
		text-align: left;
		vertical-align: middle;
	}

	table.qabot tr.qarow td.qabuttons button {
		text-decoration: none;
	}
</style>

<!-- NavBar -->
<div class="mynavbar mysticky">
	<section class="row-fluid">	
		<div class="span12">
		    <%=nav3("Monotoring", "/monitoring", "Agency", "/monitoring", "Capacity")%>
		</div>
	</section>
</div>

<!-- Single Panel -->
<section class="row-fluid">
	<div class="span12 box">
        <table class="table table-condensed qabot">
            <%
            last_section = nil
            BlackStack::Monitoring.monitors.sort_by { |m| m.section_name }.each { |m|
              section = m.section_name
              color = m.pass? ? 'qagreen' : 'qared'
              value = m.last_value.to_s
              thres = m.get_threshold
              # if section changed
              if section.to_s != last_section
                %>
                <tr>
                  <td colspan=4>
                    <h3><%=section.to_s%></h3>
                  </td>
                </tr>
                <%
              end
              last_section = section
              %>
              <tr class='qarow'>
                <td class='qaname'>
                    <span class='qatitle'><%=m.name.encode_html%></span><br/>
                    <%=m.description.to_s%>
                </td>
                <td rowspan=1 class='qaflag <%=color%>'>
                    <%
                    if thres.to_i != 0
                    %>
                    <span class='qavalue'><%=value%> / <%=thres.to_s%></span>
                    <%
                    else # if thres.nil?
                    %>
                    <span class='qavalue'><%=value%></span>
                    <%
                    end # if thres.nil?
                    %>
                    <br/>
                    <span class='qacomment'><%=m.unit_name.encode_html%></span>
                </td>
              </tr>
              <%
            }
            %>
        </table>
    </div>
</div>
