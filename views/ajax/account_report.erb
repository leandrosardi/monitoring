<%
return_message = {}
begin
    aid = params['id_account']
    period = params['period']
    a = BlackStack::MySaaS::Account.where(:id=>aid).first
    b = BlackStack::I2P::Account.where(:id=>aid).first
    c = BlackStack::Scraper::Account.where(:id=>aid).first
    d = BlackStack::Emails::Account.where(:id=>aid).first
    min_appending_rate = BlackStack::DfyLeads::Order::MIN_APPENDING_RATE

    ndays = 0
    ndays = 1 if period == 'last_24_hours'
    ndays = 2 if period == 'last_2_days'
    ndays = 3 if period == 'last_3_days'
    ndays = 7 if period == 'last_week'
    ndays = 30 if period == 'last_month'
    from = DB["select cast('#{now}' as timestamp)-interval '#{ndays} days' as dt"].first[:dt]
    sent = DB["select sum(v.n) as n from (#{BlackStack::Emails::query_sents(from, aid)}) as v"].first[:n].to_i
    pr = DB["select sum(v.n) as n from (#{BlackStack::Emails::query_positive_replies(from, aid)}) as v"].first[:n].to_i

    # Balance
    dt = b.deadline
    if dt
        dt = Time.parse(dt.to_s)
        days = ((dt-now).to_f / (24 * 60 * 60).to_f).to_i
        if days < 7
            color = 'orange'
        elsif days < 0
            color = 'red'
        else
            color = 'gray'
        end
        return_message[:deadline] = {}
        return_message[:deadline][:value] = "#{days} days"
        return_message[:deadline][:color] = color
    else
        return_message[:deadline] = {}
        return_message[:deadline][:value] = '-'
        return_message[:deadline][:color] = 'gray'
    end

    BlackStack::I2P::Account.update_balance_snapshot([b.id])

    balance = BlackStack::I2P::Balance.new(b.id, 'leads')
    return_message[:leads_credits] = {}
    return_message[:leads_credits][:value] = b.credits('leads').to_i.to_label
    return_message[:leads_credits][:color] = b.credits('leads').to_i > 0 ? 'blue' : 'red'

    balance = BlackStack::I2P::Balance.new(b.id, 'deliveries')
    return_message[:email_credits] = {}
    return_message[:email_credits][:value] = b.credits('deliveries').to_i.to_label
    return_message[:email_credits][:color] = b.credits('deliveries').to_i > 0 ? 'blue' : 'red'

    # Leads Scraping
    w = c.orders.size
    x = c.orders.select { |o| o.dfyl_id_parent.nil? && o.status && o.dfyl_stat_progress.to_i < 100 }.size
    y = c.orders.select { |o| o.dfyl_id_parent.nil? && o.status && o.dfyl_stat_progress.to_i >= 100 }.size
    z = c.orders.select { |o| o.dfyl_id_parent.nil? && !o.status }.size
    return_message[:active_orders] = {}
    if w == 0 # no orders at all
        return_message[:active_orders][:value] = "0"
        return_message[:active_orders][:color] = 'gray'
        return_message[:active_orders][:title] = 'no orders at all'
    elsif x > 0 # active and not-completed orders
        cnt = x
        avg = (c.orders.select { |o| o.dfyl_id_parent.nil? && o.status && o.dfyl_stat_progress.to_i < 100 }.map { |o| o.dfyl_stat_progress.to_i }.sum.to_f / x.to_f).to_i
        return_message[:active_orders][:value] = "#{cnt.to_label}"
        return_message[:active_orders][:color] = 'green'
        return_message[:active_orders][:title] = "orders in progress at #{avg}%"
        return_message[:active_orders][:label] = {}
        return_message[:active_orders][:label][:value] = "#{avg}%"
        return_message[:active_orders][:label][:color] = 'gray'
    elsif y > 0 # active and completed orders
        cnt = y
        avg = (c.orders.select { |o| o.dfyl_id_parent.nil? && o.status && o.dfyl_stat_progress.to_i >= 100 }.map { |o| o.dfyl_stat_progress.to_i }.sum.to_f / y.to_f).to_i
        return_message[:active_orders][:value] = "<i class='icon-ok'></i>"
        return_message[:active_orders][:color] = 'blue'
        return_message[:active_orders][:title] = 'orders completed'
        return_message[:active_orders][:label] = {}
        return_message[:active_orders][:label][:value] = "#{avg}%"
        return_message[:active_orders][:label][:color] = 'gray'
    elsif z > 0 # inactive orders
        cnt = z
        avg = (c.orders.select { |o| o.dfyl_id_parent.nil? && !o.status }.map { |o| o.dfyl_stat_progress.to_i }.sum.to_f / z.to_f).to_i
        return_message[:active_orders][:value] = "<i class='icon-off'></i>"
        return_message[:active_orders][:color] = 'red'
        return_message[:active_orders][:title] = 'orders paused'
        return_message[:active_orders][:label] = {}
        return_message[:active_orders][:label][:value] = "#{avg}%"
        return_message[:active_orders][:label][:color] = 'gray'
    end

    w = c.orders.select { |o| o.dfyl_id_parent.nil? && o.status && o.dfyl_stat_progress.to_i < 100 }
    x = w.size
    y = w.map { |o| o.dfyl_stat_verified_rate.to_f }.sum
    z = x > 0 ? (y.to_f / x.to_f).to_i : 0
    cnt = w.map { |o| o.dfyl_stat_leads_verified.to_i }.sum
    return_message[:average_verified_rate] = {}
    return_message[:average_verified_rate][:value] = cnt.to_label
    return_message[:average_verified_rate][:color] = cnt > 0 ? 'blue' : 'gray'
    return_message[:average_verified_rate][:title] = x > 0 ? "Found Verified Email of #{z}% of Leads Scraped" : 'no active orders'
    return_message[:average_verified_rate][:label] = {}
    return_message[:average_verified_rate][:label][:value] = x > 0 ? "#{z}%" : '-'
    if x > 0
        return_message[:average_verified_rate][:label][:color] = z < min_appending_rate ? 'red' : 'green'
    else
        return_message[:average_verified_rate][:label][:color] = 'gray'
    end
    
    # needed pages
    row = DB["
        select coalesce(a.dfyl_daily_quota, cast(v.pages_per_day_2 as int)) as pages_per_day  
        from v_dfyl_capacity_needed v 
        join account a on a.id=v.id_account
        where v.id_account = '#{aid}'
    "].first
    x = row.nil? ? 0 : row[:pages_per_day].to_i 
    # uploaded pages
    y = 0 # total pages
    row = DB["
        select #{ndays} as total_days, count(p.id) as total_pages
        from scr_movement m
        join scr_page p on p.id=m.id_page
        join scr_order o on o.id=p.id_order
        join \"user\" u on u.id=o.id_user
        where coalesce(m.type,0)=0
        and m.create_time > current_timestamp - interval '#{ndays} day'
        and u.id_account='#{aid}'
    "].first
    y = row[:total_pages].to_f / row[:total_days].to_f if row && row[:total_days].to_i > 0
    # 
    return_message[:daily_pages_needed] = {}
    return_message[:daily_pages_needed][:value] = x==0 ? '-' : x.to_label
    return_message[:daily_pages_needed][:color] = 'gray'
    return_message[:daily_pages_needed][:title] = "Daily Pages Needed to Meet Deadline, over the Pages Uploaded Daily in the #{period.to_s.gsub('_', ' ').capitalize}"
    return_message[:daily_pages_needed][:label] = {}
    return_message[:daily_pages_needed][:label][:value] = "#{'%.1f' % y}/d"
    return_message[:daily_pages_needed][:label][:color] = y > x ? 'green' : 'red'

    # Emails Deliveries
    w = d.campaigns.size
    x = d.campaigns.select { |o| o.status==1 && o.stat_left.to_i > 0 }.size
    y = d.campaigns.select { |o| o.status==1 && o.stat_left.to_i <= 0 }.size
    z = d.campaigns.select { |o| o.status!=1 }.size
    return_message[:active_campaigns] = {}
    if w == 0 # no campaigns at all
        return_message[:active_campaigns][:value] = "0"
        return_message[:active_campaigns][:color] = 'gray'
        return_message[:active_campaigns][:title] = 'no campaigns at all'
    elsif x > 0 # active and not-completed campaigns
        left = d.campaigns.select { |o| o.status==1 && o.stat_left.to_i > 0 }.map { |o| o.stat_left.to_i }.sum
        return_message[:active_campaigns][:value] = x.to_label
        return_message[:active_campaigns][:color] = 'green'
        return_message[:active_campaigns][:title] = 'campaigns in progress'
        return_message[:active_campaigns][:label] = {}
        return_message[:active_campaigns][:label][:value] = left.to_label
        return_message[:active_campaigns][:label][:color] = left > 0 ? 'green' : 'red'
    elsif y > 0 # active and completed campaigns
        left = 0
        return_message[:active_campaigns][:value] = "<i class='icon-ok'></i>"
        return_message[:active_campaigns][:color] = 'blue'
        return_message[:active_campaigns][:title] = 'campaigns completed'
        return_message[:active_campaigns][:label] = {}
        return_message[:active_campaigns][:label][:value] = left.to_label
        return_message[:active_campaigns][:label][:color] = left > 0 ? 'green' : 'red'
    elsif z > 0 # inactive campaigns
        left = d.campaigns.select { |o| o.status!=1}.map { |o| o.stat_left.to_i }.sum
        return_message[:active_campaigns][:value] = "<i class='icon-off'></i>"
        return_message[:active_campaigns][:color] = 'red'
        return_message[:active_campaigns][:title] = 'campaigns paused'
        return_message[:active_campaigns][:label] = {}
        return_message[:active_campaigns][:label][:value] = left.to_label
        return_message[:active_campaigns][:label][:color] = left > 0 ? 'green' : 'red'
    end

    avg = sent==0 ? 100.0 : (pr.to_f / sent.to_f) * 100.to_f
    return_message[:average_positive_responses_rate] = {}
    if sent == 0 && pr == 0
        return_message[:average_positive_responses_rate][:value] = "0/0"
        return_message[:average_positive_responses_rate][:color] = 'gray'
        return_message[:average_positive_responses_rate][:title] = 'no messages sent yet'
    elsif avg < 0.25 
        return_message[:average_positive_responses_rate][:color] = 'red'
        return_message[:average_positive_responses_rate][:value] = "#{pr.to_label}/#{sent.to_label}"
        return_message[:average_positive_responses_rate][:title] = 'low performance'

        return_message[:average_positive_responses_rate][:label] = {}
        return_message[:average_positive_responses_rate][:label][:value] = "#{'%.2f' % avg}%"
        return_message[:average_positive_responses_rate][:label][:color] = 'red'
    elsif avg >= 1.0
        return_message[:average_positive_responses_rate][:color] = 'green'
        return_message[:average_positive_responses_rate][:value] = "#{pr.to_label}/#{sent.to_label}"
        return_message[:average_positive_responses_rate][:title] = 'good performance'

        return_message[:average_positive_responses_rate][:label] = {}
        return_message[:average_positive_responses_rate][:label][:value] = "#{'%.2f' % avg}%"
        return_message[:average_positive_responses_rate][:label][:color] = 'green'
    else
        return_message[:average_positive_responses_rate][:color] = 'orange'
        return_message[:average_positive_responses_rate][:value] = "#{pr.to_label}/#{sent.to_label}"
        return_message[:average_positive_responses_rate][:title] = 'regular performance'

        return_message[:average_positive_responses_rate][:label] = {}
        return_message[:average_positive_responses_rate][:label][:value] = "#{'%.2f' % avg}%"
        return_message[:average_positive_responses_rate][:label][:color] = 'orange'
    end 

    # needed emails
    row = DB["
        select coalesce(a.eml_daily_quota, cast(v.deliveries_per_day as int)) as deliveries_per_day 
        from v_eml_capacity_needed v 
        join account a on a.id=v.id_account
        where v.id_account = '#{aid}'
    "].first
    x = row.nil? ? 0 : row[:deliveries_per_day].to_i
    # delivered emails
    y = 0 # total pages
    y = sent.to_f / ndays.to_f
    # 
    return_message[:daily_deliveries_needed] = {}
    return_message[:daily_deliveries_needed][:value] = x==0 ? '-' : x.to_label
    return_message[:daily_deliveries_needed][:color] = 'gray'
    return_message[:daily_deliveries_needed][:title] = "Daily Deliveries Needed to Meet Deadline, over the Deliveries Sent Daily in the #{period.to_s.gsub('_', ' ').capitalize}"
    return_message[:daily_deliveries_needed][:label] = {}
    return_message[:daily_deliveries_needed][:label][:value] = "#{'%.1f' % y}/d"
    return_message[:daily_deliveries_needed][:label][:color] = y > x ? 'green' : 'red'


    # return
    return_message[:status] = 'success'
rescue => e
    return_message[:status] = e.to_console
end
return return_message.to_json
%>